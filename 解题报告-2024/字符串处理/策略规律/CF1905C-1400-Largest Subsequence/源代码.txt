#include <bits/stdc++.h>
using namespace std;
using Pii = pair<int,int>;
using ll = long long;
const int N = 5050, mod = 1e9 + 7;
const double inf = 1e9;
double eps = 1e-10;
/*
    每次操作选一个字典序最大的子序列右移，求将字符串有序的最小操作数，无解-1
    只关心一开始的字典序最大的子序列
    若有解，最小操作数 ans = 该子序列的长度-1
*/
void solve(){
    int n;
    string s;
    cin >> n;
    cin >> s;
    s = " " + s;
    vector <vector<int>> Pos(30);
    vector <int> order;
    for (int i = 1; i <= n; ++ i){
        Pos[s[i]-'a'].push_back(i);
    }

    for (int i = 25; i >= 0; -- i){
        if (Pos[i].size()){
            for (auto &x : Pos[i]){
                if (order.empty() || x > order.back()){
                    order.push_back(x);
                }
            }
        }
    }
    if (s[order[0]]==s[order.back()]){
        for (int i = 1; i < n; ++ i){
            if (s[i] > s[i+1]){
                cout << -1 << "\n";
                return;
            }
        }
        cout << 0 << "\n";
        return;
    }
    deque<char> Q;
    for (int i = order.size()-1; i >= 0; -- i){
        char x = s[order[i]];
        Q.push_back(x);
    }
    for (int i = 0; i < order.size(); ++ i){
        s[order[i]] = Q.front();
        Q.pop_front();
    }

    for (int i = 1; i < n; ++ i){
        if (s[i] > s[i+1]){
            cout << -1 << "\n";
            return;
        }
    }
    int cnt = 1;
    // 只需要最后一个将字典序最大移到后面
    for (int i = order.size()-1; i >= 0; -- i){
        if (s[order[i]] == s[order[i-1]]) ++ cnt;
        else break;
    }
    cout << order.size()-1-(cnt-1) << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--)
        solve();
    return 0;
}