#include <bits/stdc++.h>
#pragma GCC optimize(3,"Ofast","inline","-fgcse","-fgcse-lm","-fipa-sra","-ftree-pre","-ftree-vrp","-fpeephole2","-ffast-math","-fsched-spec","unroll-loops","-falign-jumps","-falign-loops","-falign-labels","-fdevirtualize","-fcaller-saves","-fcrossjumping","-fthread-jumps","-funroll-loops","-freorder-blocks","-fschedule-insns","inline-functions","-ftree-tail-merge","-fschedule-insns2","-fstrict-aliasing","-falign-functions","-fcse-follow-jumps","-fsched-interblock","-fpartial-inlining","no-stack-protector","-freorder-functions","-findirect-inlining","-fhoist-adjacent-loads","-frerun-cse-after-loop","inline-small-functions","-finline-small-functions","-ftree-switch-conversion","-foptimize-sibling-calls","-fexpensive-optimizations","inline-functions-called-once","-fdelete-null-pointer-checks")
#pragma GCC target("abm","avx","avx2","f16c","fma","mmx","popcnt","sse","sse2","sse3","sse4","ssse3")
#define inline inline __attribute__((always_inline))
#define getchar() (_p==_q&&(_q=(_p=_b)+fread(_b,1,_s,stdin),_p==_q)?-1:*_p++)
using namespace std;const int _s=1<<20;char _b[_s],*_p=_b,*_q=_b;template<class T>inline void fr(T&x){x=0;char c=0;do{}while(c=getchar(),c<48||c>57);do x=x*10+c-48;while(c=getchar(),c>47&&c<58);}inline void debug(){cout<<endl;}template<class T,class...Argv>inline void debug(const T&x,const Argv&...argv){cout<<' '<<x;debug(argv...);}template<class T>inline void Debug(const string&s,const T l,const T r){cout<<' '<<s;for(T it=l;it!=r;++it)cout<<' '<<*it;cout<<endl;}template<class T>inline void Debug(const T l,const T r){for(T it=l;it!=r;++it)cout<<' '<<*it;cout<<endl;}

const int Maxn = 20 + 3;

int N;
string a;

bool check0() {
	for (auto c : a) if (c == '0') return 1;
	return 0;
}

int ctoi(char c) {
	return c - 48;
}

signed main() {
	// freopen("1.in", "r", stdin);
	// freopen("1.out", "w", stdout);
	ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int Case; cin >> Case; while (Case--) {
		cin >> N;
		cin >> a;
		int ans = 1e9;
		if (N == 2) {
			cout << stoi(a) << '\n';
			continue;
		}
		if (N == 3) {
			ans = min(ans, stoi(a.substr(0, 1)) * stoi(a.substr(1, 2)));
			ans = min(ans, stoi(a.substr(0, 1)) + stoi(a.substr(1, 2)));
			ans = min(ans, stoi(a.substr(0, 2)) * stoi(a.substr(2, 1)));
			ans = min(ans, stoi(a.substr(0, 2)) + stoi(a.substr(2, 1)));
			cout << ans << '\n';
			continue;
		}
		if (check0()) {
			cout << 0 << '\n';
			continue;
		}
		for (int key = 0; key < N - 1; ++key) {
			int res = 0;
			for (int i = 0; i < N; ++i) {
				if (i == key) {
					res += ctoi(a[i]) * 10 + ctoi(a[i + 1]);
					++i;
					continue;
				}
				if (a[i] != '1') res += ctoi(a[i]);
			}
			ans = min(ans, res);
		}
		cout << ans << '\n';
	}
	return 0;
}