#include <bits/stdc++.h>
using namespace std;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, T b){
    if (b < a) a = b;
}

void solve(){
    using ary2 = array<int,2>;
    int n, q;
    cin >> n >> q;
    vector <ary2> seq = {{0,0}};

    string s;
    cin >> s;
    for (auto &ch : s){
        auto it = seq.back();
        if (ch == 'R') it[0] += 1;
        else if (ch == 'L') it[0] -= 1;
        else if (ch == 'U') it[1] += 1;
        else it[1] -= 1;
        seq.push_back(it);
    }
    vector <array<int,4>> opts(q);  // {x,y,l,r}
    for (auto &it : opts){
        cin >> it[0] >> it[1] >> it[2] >> it[3];
    }

    vector <int> ans(q);
    vector <int> idx(q);
    iota(idx.begin(), idx.end(), 0);
    sort(idx.begin(), idx.end(), [&](int &u, int &v){  // 右端点升序
        return opts[u][3] < opts[v][3];
    });

    map <ary2, int> mps;
    int rj = -1;
    for (auto &id : idx){
        int xi = opts[id][0], yi = opts[id][1];
        int l = opts[id][2], r = opts[id][3];
        while (rj+1 <= r){
            rj += 1;
            mps[seq[rj]] = rj;
        }

        int x = seq[r][0]+seq[l-1][0]-xi;
        int y = seq[r][1]+seq[l-1][1]-yi;
        // cout << id << " " << x << " " << y << "\n";
        if (mps.count({x,y}) && mps[{x,y}] >= l-1){
            ans[id] = 1;
        }
    }

    sort(idx.begin(), idx.end(), [&](int &u, int &v){  // 左端点升序
        return opts[u][2] < opts[v][2];
    });

    set <ary2> st;
    rj = -1;
    for (auto &id : idx){
        int x = opts[id][0], y = opts[id][1];
        int l = opts[id][2], r = opts[id][3];
        while (rj+1 < l){
            rj += 1;
            st.insert(seq[rj]);
        }
        if (st.find({x,y}) != st.end()){
            ans[id] = 1;
        }
    }
    sort(idx.begin(), idx.end(), [&](int &u, int &v){  // 右端点降序
        return opts[u][3] > opts[v][3];
    });
    st.clear();
    rj = n+1;
    for (auto &id : idx){
        int x = opts[id][0], y = opts[id][1];
        int l = opts[id][2], r = opts[id][3];
        while (rj-1 > r){
            rj -= 1;
            st.insert(seq[rj]);
        }
        if (st.find({x,y}) != st.end()){
            ans[id] = 1;
        }
    }

    for (int i = 0; i < q; ++ i){
        cout << (ans[i] ? "YES\n" : "NO\n");
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}