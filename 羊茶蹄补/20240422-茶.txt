#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    i64 n, k, C1, C2;
    cin >> n >> k >> C1 >> C2;

    i64 res = 0, x = n;
    if (k > 1){
        while (x > 1){
            i64 nxt = x/k * k;
            if (nxt > 0){
                res += (x-nxt) * C1;
            } else {
                res += (x-1) * C1;
                break;
            }

            x = nxt;

            if (x > 1){
                i64 y = x/k;
                if ((x-y)*C1 >= C2){
                    x /= k;
                    res += C2;
                } else {
                    res += (x-1)*C1;
                    break;
                }
            }
        }
    } else {
        res += (n-1) * C1;
    }

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}