#include <bits/stdc++.h>
using ll = long long;
using namespace std;
const int N = 900, INF  = 1e9;
struct Edge {
    int ed, len, cost, id;
};
vector <Edge> edge[N];
int pre[N], lst[N], f[N], dis[N], S, T;
bool vis[N];

void add(int a, int b, int c, int d){
    int ra = edge[a].size(), rb = edge[b].size();
    edge[a].push_back({b, c, d, rb}), edge[b].push_back({a, 0, -d, ra});

}
bool spfa(){
    memset(dis, 0x3f, sizeof dis), memset(f, 0, sizeof f);
    queue<int> que;
    que.push(S), dis[S] = 0, f[S] = INF;
    while (!que.empty()){
        int t = que.front();
        que.pop();
        vis[t] = false;
        for (int i = 0; i < edge[t].size(); ++ i){
            int ver = edge[t][i].ed, cost = edge[t][i].cost, len = edge[t][i].len;
            if (len && dis[ver] > dis[t]+cost){
                dis[ver] = dis[t]+cost;
                pre[ver] = i, lst[ver] = t;
                f[ver] = min(f[t], len);
                if (!vis[ver])
                    que.push(ver), vis[ver] = true;
            }
        }
    }
    return f[T] > 0;
}
int EK(){
    int flow = 0, cost = 0;
    while (spfa()){
        int t = f[T];
        flow += t, cost += t*dis[T];
        for (int i = T; i != S; i = lst[i]){
            auto &u = edge[lst[i]][pre[i]];
            u.len -= t;
            edge[i][u.id].len += t;
        }
    }
    return cost;
}

void solve(){
    for (int i = 0; i < N; ++ i) edge[i].clear();
    int n, m;
    cin >> n >> m;
    S = n+m+1, T = n+m+2;

    for (int i = 1, x; i <= n; ++ i){
        cin >> x;
        add(i, T, x, 0), add(i, T, INF, 1);
        //容量为x，费用为0，容量为正无穷，费用为1
    }
    vector <array<int,2>> q(m+1);
    for (int i = 1, a,b; i <= m; ++ i){
        cin >> a >> b;
        q[i] = {a, b};
        add(S, n+i, 1, 0);
        add(n+i, a, 1, 0), add(n+i, b, 1, 0);
    }
    cout << EK() << "\n";

    for (int u = n+1; u <= n+m; ++ u)
        for (auto it : edge[u]){
            if (it.ed > n+m) continue;
            if (!it.len){
                if (it.ed == q[u-n][1]) cout << 0;
                else cout << 1;
                break;
            }
        }
    cout << "\n";
}

int main(){
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}

