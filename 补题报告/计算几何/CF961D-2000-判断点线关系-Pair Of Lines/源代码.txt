#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int mod = 1e9+7, N = 1e5+11;
struct dot {
    ll x, y;
};
typedef dot Vector;
struct line {
    dot p;
    Vector v;
};
double operator & (Vector a, Vector b){
    return a.x*b.x + a.y*b.y;
}
double length(Vector a){
    return sqrt(a&a);
}
double angle(dot a, dot b){
    return acos((a&b)/length(a)/length(b));
}
Vector operator + (Vector a, Vector b){
    return {a.x+b.x, a.y+b.y};
}
Vector operator * (double k, Vector a){
    return {k*a.x, k*a.y};
}
Vector operator - (dot a, dot b){
    return {a.x-b.x, a.y-b.y};
}
ll cross(Vector a, Vector b){
    return a.x*b.y - a.y*b.x;
}
dot intersect(line a, line b){
    Vector q = a.p-b.p;
    double k = cross(b.v, q) / cross(a.v, b.v);
    return a.p + k*a.v;
}
bool onseg(dot a, dot b, dot c){
    return !cross(b-a, c-a);
}
vector <dot> p(N);
bool is[N];
int n;
bool check(int a, int b){
    memset(is, 0, sizeof(bool)*(n+1));
    for (int i = 1; i <= n; ++ i)
        if (onseg(p[a], p[b], p[i])) is[i] = true;
    int p1 = -1, p2 = -1;
    for (int i = 1; i <= n; ++ i)
        if (!is[i]){
            if (p1 == -1) p1 = i;
            else {
                p2 = i;
                break;
            }
        }
    if (p1 == -1 || p2 == -1) return true;
    for (int i = 1; i <= n; ++ i)
        if (!is[i] && !onseg(p[p1], p[p2], p[i])) return false;
    return true;
}
void solve(){
    cin >> n;
    for (int i = 1; i <= n; ++ i) cin >> p[i].x >> p[i].y;
    if (n <= 4) return cout << "YES\n", void();
    if (check(1, 2) || check(1, 3) || check(2, 3)) cout << "YES\n";  //前三个点组成的直线有三种组合
    else cout << "NO\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}