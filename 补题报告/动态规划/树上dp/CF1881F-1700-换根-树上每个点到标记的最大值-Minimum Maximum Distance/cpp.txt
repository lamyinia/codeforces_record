#include <bits/stdc++.h>
using namespace std;

void solve(){
    const int inf = 1e9;
    int n, k;
    cin >> n >> k;
    vector <vector<int>> g(n);
    vector <int> mark(n), f1(n, -inf), pf1(n, -1), f2(n, -inf);
    for (int i = 0, x; i < k; ++ i){
        cin >> x;
        x -= 1;
        mark[x] = 1;
    }
    for (int i = 0, a,b; i < n-1; ++ i){
        cin >> a >> b;
        a -= 1;
        b -= 1;
        g[a].push_back(b);
        g[b].push_back(a);
    }

    auto dfs_find = [&](auto &&self, int x, int fa)->int{
        if (mark[x]) f1[x] = 0;
        for (auto &y : g[x]){
            if (y == fa) continue;
            int d = self(self, y, x);
            if (d == -inf) continue;
            d += 1;
            if (d > f1[x]){
                f2[x] = f1[x];
                f1[x] = d, pf1[x] = y;
            } else if (d > f2[x]){
                f2[x] = d;
            }
        }
        return f1[x];
    };

    int res = inf;
    auto dfs_root = [&](auto &&self, int x, int fa, int reco)->void{
        res = min(res, max(reco, f1[x]));
        for (auto &y : g[x]){
            if (y == fa) continue;
            if (y == pf1[x]){
                self(self, y, x, max(reco, f2[x])+1);
            } else {
                self(self, y, x, max(reco, f1[x])+1);
            }
        }
    };

    dfs_find(dfs_find, 0, -1);
    dfs_root(dfs_root, 0, -1, -inf);

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}