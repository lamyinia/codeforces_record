#include bitsstdc++.h
using namespace std;

void solve(){
    const int mod = 998244353;
    auto pows = [&](long long a, int b)-int{
        long long res = 1;
        while (b){
            if (b&1) res = resa%mod;
            a = aa%mod;
            b = 1;
        }
        return res;
    };

    int n;
    cin  n;
    vector int p(n+1), sz(n+1, 1), fa(n+1), dep(n+1);
    iota(p.begin(), p.end(), 0);
    auto cmps = [&](int u, int v)-bool{
        return dep[u]  dep[v];
    };

    functionint(int) find = [&](int x){
        return p[x] = p[x] == x  x  find(p[x]);
    };
    auto merge = [&](int x, int y)-void{
        x = find(x), y = find(y);
        if (dep[x]  dep[y]) swap(x, y);
        sz[x] += sz[y];
        p[y] = x;
    };

    vector vectorint g(n+1);
    vector arrayint,2 opt;
    for (int i = 0; i  n-1; ++ i){
        int x, y;
        cin  x  y;
        opt.push_back({x, y});
    }
    for (int i = 0; i  n-1; ++ i){
        int x, y;
        cin  x  y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    auto dfs = [&](auto &&self, int x, int father)-void{
        fa[x] = father, dep[x] = dep[father]+1;
        for (auto &y  g[x]){
            if (fa[y]) continue;
            self(self, y, x);
        }
    };

    dfs(dfs, 1, 1);
    int res = 1;

    for (int i = 0; i  n-1; ++ i){
        int x = opt[i][0], y =  opt[i][1];
        x = find(x), y = find(y);
        if (dep[x]  dep[y]) swap(x, y);
        int node = fa[y];
        if (find(node) == x){
            res = 1ll  res  sz[x] %mod  sz[y] %mod;
            merge(x, y);
        } else {
            cout  0  n;
            return;
        }
    }

    cout  pows(res, mod-2)  n;
}

int main(){
 #ifdef ONLINE_JUDGE
    iossync_with_stdio(0), cin.tie(0), cout.tie(0);
 #else
     freopen(in.txt, rt, stdin), freopen(out.txt, wt, stdout);
 #endif
    int _ = 1;
    while (_--) solve();
    return 0;
}