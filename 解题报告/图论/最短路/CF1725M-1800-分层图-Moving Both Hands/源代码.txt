#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 200050;
struct Edge {
    ll dis, to;
    bool operator < (Edge t)const{
        return dis > t.dis;
    }
};
void solve(){
    int n, m;
    cin >> n >> m;
    vector <vector<Edge>> g(2*n+1);
    vector <ll> dist(2*n+1, 1e18);
    for (int i = 1; i <= n; ++ i) g[i].push_back({0, i+n});
    while (m--){
        int a, b, c;
        cin >> a >> b >> c;
        g[a].push_back({c, b});
        g[b+n].push_back({c, a+n});
    }

    auto dijkstra = [&]()->void{
        priority_queue<Edge> pq;
        pq.push({0, 1});
        dist[1] = 0;
        while (!pq.empty()){
            auto [diso, u] = pq.top();
            pq.pop();
            if (diso > dist[u]) continue;
            for (auto &[dis, x] : g[u]){
                if (dist[x] > dist[u]+dis){
                    dist[x] = dist[u]+dis;
                    pq.push({dist[x], x});
                }
            }
        }
    };
    dijkstra();
    for (int i = 2; i <= n; ++ i){
        if (dist[i+n] == 1e18) cout << -1 << "\n";
        else cout << dist[i+n] << "\n";
    }
    return;
}

int main(){
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int _ = 1;
    while (_--) solve();
    return 0;
}