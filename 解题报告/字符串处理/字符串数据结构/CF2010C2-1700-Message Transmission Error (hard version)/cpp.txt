/*
	当连续出现两个相同的字符串时，两个字符串可能会重叠.
	输入这个字符串，判断它会不会重合.如果重合，哪里重合

	如果 2*ne[n] 大于 t 的长度，说明 t 的最长公共前后缀有相交的部分，那么相交处就为原串发生合并的地方
*/
#include <bits/stdc++.h>
using namespace std;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, T b){
    if (b < a) a = b;
}

void solve(){
    string s;
    cin >> s;
    int n = s.size();
    s = " " + s;
    vector <int> ne(n+1);
    ne[0] = -1;
    for (int i = 1, j; i <= n; ++ i){
        j = ne[i-1];
        while (j!=-1 && s[j+1] != s[i]) j = ne[j];
        ne[i] = j+1;
    }

    if (2*ne[n] > n){
        cout << "YES\n" << s.substr(1, ne[n]) << "\n";
    } else {
        cout << "NO\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}