import bisect
import sys
import typing
from math import sqrt, inf, ceil
from functools import cmp_to_key
from collections import Counter, deque
from heapq import heapify, heappop, heappush
from itertools import accumulate

input = lambda: sys.stdin.readline().strip()

def I():
    return input()
def II():
    return int(input())
def MII():
    return map(int, input().split())
def LI():
    return list(input().split())
def LII():
    return list(map(int, input().split()))
def LFI():
    return list(map(float, input().split()))
def GMI():
    return map(lambda x: int(x) - 1, input().split())
def LGMI():
    return list(map(lambda x: int(x) - 1, input().split()))

def main():
    n = int(input())
    A = list(map(int, input().split()))

    vis = [0]*(n)
    i = 0
    while i < n-1:
        while i < n-1 and A[i] == A[i+1]:
            vis[i] = vis[i+1] = 1
            i += 1
        else: i += 1

    res = 0

    i = 1
    while i < n-1:
        if vis[i]:
            i += 1
            continue
        j = i
        while j < n-1 and not vis[j]:
            j += 1
        record = j
        j -= 1
        res = max(res, (j-i+2) // 2)
        x, y = A[i-1], A[j+1]
        while i <= j:
            A[i] = x
            A[j] = y
            i += 1
            j -= 1
        i = record

    print(res)
    print(*A)

if __name__ == "__main__":
    _ = 1
    while _:
        _ -= 1
        main()