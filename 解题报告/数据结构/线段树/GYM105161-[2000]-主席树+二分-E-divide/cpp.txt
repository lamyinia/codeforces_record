#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 15000000;
struct Node {
    int v;
    Node *l, *r;
    Node(){}
    Node(int v, Node*l, Node*r):v(v), l(l), r(r){}
    Node* insert(int lt, int rt, int pos);
};
Node *Null = new Node();
Node* Node::insert(int lt, int rt, int pos){
    if (pos >= lt && pos <= rt){
        if (lt == rt) return new Node(v+1, Null, Null);
        int mid = lt+rt >> 1;
        return new Node(v+1, l->insert(lt,mid,pos), r->insert(mid+1,rt,pos));
    }
    return this;
}

void solve(){
    const int limit = 1e5;
    Null->l = Null, Null->r = Null;
    int n, m;
    cin >> n >> m;
    vector <int> nums(n);
    for (auto &x : nums) cin >> x;
    vector <Node*> root(n+1);
    root[0] = Null;
    for (int i = 0; i < n; ++ i){
        int x = nums[i];
        if (x) root[i+1] = root[i]->insert(0, limit, x);
        else root[i+1] = root[i];
        while (x){
            x /= 2;
            if (x) root[i+1] = root[i+1]->insert(0, limit, x);
        }
    }

    function<int(Node*,Node*,int,int,int,int)> query = [&](Node *p, Node *q, int lt, int rt, int l, int r){
        if (lt >= l && rt <= r){
            return p->v - q->v;
        }
        int mid = lt+rt >> 1;
        int res = 0;
        if (mid >= l) res += query(p->l,q->l,lt,mid,l,r);
        if (mid < r) res += query(p->r,q->r,mid+1,rt,l,r);
        return res;
    };

    while (m--){
        int l, r, k;
        cin >> l >> r >> k;
        int lt = 0, rt = limit+1;
        while (lt < rt){
            int mid = lt+rt >> 1;
            if (k >= query(root[r],root[l-1],0,limit,mid+1,limit)) rt = mid;
            else lt = mid+1;
        }
        cout << lt << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}