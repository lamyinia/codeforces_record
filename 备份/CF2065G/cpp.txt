#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 2e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i];
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n;
    cin >> n;
    const int tot = n;
    vector <i64> prms;
    vector <int> vis(tot+1);
    for (int i = 2; i <= tot; ++ i){
        if (!vis[i]) prms.push_back(i);
        for (auto &y : prms){
            if (i*y > tot) break;
            vis[i*y] = 1;
            if (i%y == 0) break;
        }
    }
    
    vector <int> A(n), cnts(n+1), mak(n);
    for (auto &x : A){
        cin >> x;
    }

    i64 res = 0, all = 0;
    for (int i = 0; i < n; ++ i){
        int &x = A[i];
        if (!vis[x]){
            all += 1, cnts[x] += 1;
            res += all - cnts[x];
        } else {
            int jg = 0, k;
            for (int u = 2; u*u <= x; ++ u){
                if (x%u == 0){
                    if (!vis[u] && !vis[x/u]){
                        jg = 1;
                        k = u;
                    }
                    break;
                }
            }
            if (jg) mak[i] = k;
        }
        // cout << res << "\n";
    }
    for (int i = 0; i < n; ++ i){
        if (mak[i]){
            cnts[A[i]] += 1;
            int u = mak[i], v = A[i]/mak[i];
            res += cnts[A[i]];
            res += cnts[u];
            if (u != v) res += cnts[v];
        }
    }

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}