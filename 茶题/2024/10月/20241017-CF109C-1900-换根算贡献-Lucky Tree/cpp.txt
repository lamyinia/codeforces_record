#include <bits/stdc++.h>
using namespace std;
using ll = long long;
template <class T> void fmax(T &a, T b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, T b){
    if (b < a) a = b;
}

void solve(){
    int n;
    cin >> n;
    vector <vector<array<int,2>>> g(n);
    for (int i = 0, x,y,z; i < n-1; ++ i){
        cin >> x >> y >> z;
        x -= 1, y -= 1;
        g[x].push_back({y,z});
        g[y].push_back({x,z});
    }

    vector <int> f(n), sz(n);
    
    auto call = [&](vector <int> &A)->long long{  
        long long ans = 0, all = 0;
        int An = A.size();
        for (int i = 0; i < An; ++ i){  //有An 组，选两个，每组选一个有多少选法
            ans += all * A[i];
            all += A[i];
        }
        return ans;
    };
    auto ck = [&](int x)->bool{
        while (x){
            int y = x%10;
            if (y != 4 && y != 7) return false;
            x /= 10;
        }
        return true;
    };

    auto dfs = [&](auto &&self, int x, int fa)->void{
        sz[x] = 1;
        for (auto &it : g[x]){
            int y = it[0], w = it[1];
            if (y == fa) continue;
            self(self, y, x);
            sz[x] += sz[y];
            if (ck(w)) f[x] += sz[y];
            else f[x] += f[y];
        }
    };
    dfs(dfs, 0, -1);

    // f[x] 表示从结点从 x 往下走 可以经过多少个 它的 幸运结点(路径至少包含一条幸运边)
    long long res = 0;
    auto dfs_root = [&](auto &&self, int x, int fa, int reco)->void{
        vector <int> tmps = {reco};
        res += 1ll*reco*(reco-1);
        for (auto &it : g[x]){
            int y = it[0], w = it[1];
            if (y == fa) continue;
            int len = ck(w) ? sz[y] : f[y];
            res += 1ll * len * (len-1);
            tmps.push_back(len);
        }
        res += 2 * call(tmps);  // 选的两个位置有序，要乘2
        reco += f[x];
        for (auto &it : g[x]){
            int y = it[0], w = it[1];
            if (y == fa) continue;
            int len = ck(w) ? n-sz[y] : reco - f[y];
            self(self, y, x, len);
        }
    };

    dfs_root(dfs_root, 0, -1, 0ll);

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}