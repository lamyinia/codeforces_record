#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}

void solve(){
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<vector<int>> locs(26);
    vector <int> idx(26);
    for (int i = 0; i < n; ++ i){
        locs[s[i]-'a'].push_back(i);
    }
    iota(idx.begin(), idx.end(), 0);
    sort(idx.begin(), idx.end(), [&](int &u, int &v){  // 按字母集合大小降序排
        return locs[u].size() > locs[v].size();
    });

    int chose = -1, ans = 1e9;
    for (int i = 0; i < 26; ++ i){
        int num = i+1;
        if (n%num == 0){
            int sm = 0, y = n/num;  // 让前 i 个高度都变成 y
            for (int j = 0; j < 26; ++ j){
                int id = idx[j];
                if (j <= i){
                    sm += max((int)locs[id].size() - y, 0);  // 前 i 个高度不能高于 y
                } else {
                    sm += locs[id].size();  // i 后面的都不能用
                }
            }
            if (sm < ans){
                chose = i, ans = sm;
            }
        }
    }

    assert(chose != -1);
    assert(n%(chose+1) == 0);
    vector <int> loc;
    int y = n / (chose+1);

    for (int j = 0; j < 26; ++ j){
        int i = idx[j];
        if (j <= chose){
            while (locs[i].size() > y){
                loc.push_back(locs[i].back());
                locs[i].pop_back();
            }
        } else {
            while (locs[i].size()){
                loc.push_back(locs[i].back());
                locs[i].pop_back();
            }
        }
    }

    for (int j = 0; j <= chose; ++ j){
        int i = idx[j];
        while (locs[i].size() < y){
            locs[i].push_back(loc.back());
            loc.pop_back();
        }
    }
    assert(loc.empty());

    string res(n, '?');
    for (int j = 0; j <= chose; ++ j){
        int i = idx[j];
        for (auto &x : locs[i]){
            res[x] = char('a'+i);
        }
    }

    cout << ans << "\n" << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}