#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 200050, mod = 1e9 + 7, inf = 1e9;
int n, t;

void solve(){
    cin >> n >> t;
    vector <int> nums(n+1);
    for (int i = 1; i <= n; ++ i) cin >> nums[i];

    if (n*t < 2*N){
        vector <int> stk;
        for (int j = 1; j <= t; ++ j){
            for (int i = 1; i <= n; ++ i){
                auto it = upper_bound(stk.begin(), stk.end(), nums[i]);
                if (it == stk.end()) stk.push_back(nums[i]);
                else *it = nums[i];
            }
        }
        cout << stk.size();
    } else {
        vector <int> stk;
        int p, del1, del2;
        for (int j = 1; j <= t; ++ j){
            for (int i = 1; i <= n; ++ i){
                auto it = upper_bound(stk.begin(), stk.end(), nums[i]);
                if (it == stk.end()) stk.push_back(nums[i]);
                else *it = nums[i];
            }
            if (n*j > N){
                p = j;
                del1 = (int)stk.size();
                break;
            }
        }
        for (int i = 1; i <= n; ++ i){
            auto it = upper_bound(stk.begin(), stk.end(), nums[i]);
            if (it == stk.end()) stk.push_back(nums[i]);
            else *it = nums[i];
        }
        del2 = (int)stk.size();
        cout << del1 + (t-p)*(del2-del1) << "\n";
    }
}

int main(){
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
    int _ = 1;
    while (_--)
        solve();
    return 0;
}