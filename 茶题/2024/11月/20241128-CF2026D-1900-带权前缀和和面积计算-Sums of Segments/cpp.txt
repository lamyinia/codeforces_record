#include <bits/stdc++.h>
using namespace std;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, T b){
    if (b < a) a = b;
}

void solve(){
    int n;
    cin >> n;
    vector <long long> chuk(n+1), trisum(n+1), chuksum(n+1), locsum(n+1);
    vector <int> A(n+1), Pr(n+1);
    for (int i = 1, d = n; i <= n; ++ i, -- d){
        cin >> A[i];
        Pr[i] = Pr[i-1] + A[i];  // 线性前缀和
        trisum[i] = trisum[i-1] + Pr[i];  //  三角形前缀和
        locsum[i] = locsum[i-1] + d;  // 位置前缀和
    }

    long long all = trisum[n];
    for (int i = 1, d = n; i <= n; ++ i, -- d){
        chuk[i] = all;
        chuksum[i] = chuksum[i-1] + chuk[i]; //  块状前缀和
        all -= d*A[i];
    }

    auto fixup = [&](int Lpoint, long long hi, long long lo){
        assert(hi >= 1), assert(lo <= n), assert(hi <= lo);
        long long cur = trisum[lo] - trisum[hi-1];
        cur -= Pr[Lpoint-1] * (lo-hi+1);
        return cur;
    };

    int q;
    cin >> q;
    auto find = [&](long long l, long long r)->array<int,2>{
        int id1 = lower_bound(locsum.begin()+1, locsum.end(), l) - locsum.begin();
        int id2 = lower_bound(locsum.begin()+1, locsum.end(), r) - locsum.begin();
        return {id1, id2};
    };

    for (int i = 0; i < q; ++ i){
        long long l, r;
        cin >> l >> r;
        auto id = find(l, r);

        long long res = 0;
        if (id[0] == id[1]){
            int j = id[0];
            l -= locsum[j-1], r -= locsum[j-1];
            assert(l > 0), assert(r > 0);
            res += fixup(j, l+j-1, r+j-1);
        } else {
            int j1 = id[0], j2 = id[1];  // j1, j2, j表示 Lpoint，它们减1就是向下的偏移量
            res += chuksum[j2-1] - chuksum[j1];
            l -= locsum[j1-1], r -= locsum[j2-1];
            assert(l > 0), assert(r > 0);
            res += fixup(j1, l+j1-1, n);
            res += fixup(j2, 1+j2-1, r+j2-1);
        }

        cout << res << "\n";
    }
}
int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}