#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}

void solve(){
    using ary2 = array<int,2>;

    int n, m;
    cin >> n >> m;
    vector <int> A(n+1), Pr(n+1);
    vector <ary2> segs(m);
    for (auto &it : segs){
        cin >> it[0] >> it[1];
    }
    int q;
    cin >> q;
    vector <int> chges(q);
    for (auto &x : chges){
        cin >> x;
    }

    auto chk = [&](int mid)->bool{
        for (auto &x : A) x = 0;
        
        for (int i = 0; i < mid; ++ i){
            A[chges[i]] = 1;
        }
        for (int i = 1; i <= n; ++ i){
            Pr[i] = Pr[i-1] + A[i];
        }
        for (auto &it : segs){
            int &l = it[0], &r = it[1];
            int x = Pr[r] - Pr[l-1];
            if (2*x > r-l+1) return true;
        }
        return false;
    };

    if (!chk(q)){
        cout << -1 << "\n";
        return;
    }
    
    int lo = 1, hi = q;
    while (lo < hi){
        int mid = (lo + hi) >> 1;
        if (chk(mid)) hi = mid;
        else lo = mid+1;
    }
    cout << lo << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}

/*
	拓展：每执行一次操作输出有多少个优美的子数组？
		    给第 i 个操作更新的 p 位置设置时间戳 time[p] = i。
		   则对于每个区间，它变成美丽子数组的时间就是它的第 k 小数，k = (len+1)/2。

*/