#include <bits/stdc++.h>
using namespace std;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, T b){
    if (b < a) a = b;
}
const long long inf = 1e14;
struct Node {
    array<long long,4> u;
    Node operator + (const Node &oth){
        return {max(max(u[0],oth.u[0]), u[2]+oth.u[1]), 
        max(u[1], u[3]+oth.u[1]), max(oth.u[2], u[2]+oth.u[3]), 
        (u[3]!=inf) * u[3] + (oth.u[3]!=inf) * oth.u[3]};
    }
};
struct segTree {
    vector <Node> info;
    int n;
    segTree(){}
    segTree(int n): info(4*n), n(n) {}
    void pull(int u){
        info[u] = info[u*2] + info[u*2+1];
    }
    void update(int u, int lt, int rt, int loc, long long val){
        if (lt == rt){
            info[u] = {val, val, val, val};
            return;
        }
        int mid = (lt + rt) >> 1;
        if (mid >= loc) update(u*2, lt, mid, loc, val);
        else update(u*2+1, mid+1, rt, loc, val);
        pull(u);
    }
    void update(int loc, long long val){
        update(1, 1, n, loc, val);
    }
    Node query(int u, int lt, int rt, int l, int r){
        if (lt >= l && rt <= r) return info[u];
        Node Lres = {-inf,-inf,-inf,-inf}, Rres = {-inf,-inf,-inf,-inf};
        int mid = (lt + rt) >> 1;
        if (mid >= l) Lres = query(u*2, lt, mid, l, r);
        if (mid < r) Rres = query(u*2+1, mid+1, rt, l, r);
        return (Lres + Rres);
    }
    long long query(int l, int r){
        auto j = query(1, 1, n, l, r);
        return j.u[0];
    }
};

void solve(){
    using ary3 = array<int,3>;
    using Yint = segTree;

    vector <ary3> opts(1);
    int n, m;
    cin >> n >> m;
    vector<vector<int>> Ls(n+1), Rs(n+1);
    for (int i = 1, u,v,x; i <= m; ++ i){
        cin >> u >> v >> x;
        opts.push_back({u,v,x});
        Ls[u].push_back(i), Rs[v].push_back(i);
    }
    int q;
    cin >> q;
    vector <long long> ans(q);
    vector<vector<ary3>> qrys(n+1);
    for (int i = 0; i < q; ++ i){
        int u, s, t;
        cin >> u >> s >> t;
        qrys[u].push_back({s, t, i});
    }

    Yint Y(m+1);
    set <int> st;
    for (int i = 1; i <= n; ++ i){
        for (auto &id : Ls[i]){
            st.insert(id);
            Y.update(id, opts[id][2]);
        }

        for (auto &j : qrys[i]){
            ans[j[2]] = Y.query(j[0], j[1]);
        }

        for (auto &id : Rs[i]){
            if (st.count(id)){
                st.erase(id);
                Y.update(id, 0);
            }
        }
    }

    for (auto &x : ans){
        cout << x << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}