#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    const int mod = 1e9+7;
    i64 res = 0;

    int n;
    i64 k;
    cin >> n >> k;

    if (k > n){
        res += (k-n)%mod * n % mod;
        k = n;
    }

    auto s1 = [&](i64 x)->i64{
        return x*(x+1)/2;
    };
    auto s2 = [&](i64 x)->i64{
        return x*(x+1)*(2*x+1)/6;
    };

    for (i64 l = 2, r; l <= k; l = r+1){
        if (l*l <= n){
            vector <i64> curs;
            i64 cur = n;
            while (cur){
                curs.push_back(cur%l);
                cur /= l;
            }
            for (auto &x : curs){
                cur = cur*l + x;
                cur %= mod;
            }
            res = (res+cur) % mod;
            r = l;
        } else {
            r = n / (n/l);
            r = min(r, k);

            i64 v = n/l;
            (res += n * (s1(r)-s1(l-1)) % mod) %= mod;
            (res -= v * (s2(r)-s2(l-1)) % mod) %= mod;
            if (res < 0) res += mod;
            (res += v*(r-l+1)%mod) %= mod;
        }
    }

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--){
        solve();
    }
    return 0;
}