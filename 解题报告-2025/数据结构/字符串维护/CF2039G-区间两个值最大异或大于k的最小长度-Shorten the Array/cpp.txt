#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, k;
    cin >> n >> k;
    vector <int> A(n);
    for (auto &x : A){
        cin >> x;
    }
    if (k == 0) return void(cout << 1 << "\n");

    vector<array<int,2>> nodes(1), cnts(1);
    array<int,2> node = {0, 0};
    int tot = 0;
    const int rt = 0;
    auto open = [&]()->int{
        nodes.push_back(node);
        cnts.push_back(node);
        return ++ tot;
    };
    auto insert = [&](int x)->void{
        int u = rt;
        for (int i = 29; i >= 0; -- i){
            int c = x>>i & 1;
            if (!nodes[u][c]){
                int id = open();
                nodes[u][c] = id;
            }
            cnts[u][c] += 1;
            u = nodes[u][c];
        }
    };
    auto del = [&](int x)->void{
        int u = rt;
        for (int i = 29; i >= 0; -- i){
            int c = x>>i & 1;
            cnts[u][c] -= 1;
            u = nodes[u][c];
        }
    };
    auto find = [&](int x)->int{
        int u = rt, res = 0;
        for (int i = 29; i >= 0; -- i){
            int c = x>>i & 1;
            if (cnts[u][!c]){
                u = nodes[u][!c];
                res += 1 << i;
            } else {
                u = nodes[u][c];
            }
        }
        return res;
    };

    int res = inf_int;
    for (int i = 0, j = -1, v; i < n; ++ i){
        if (i >= j || find(A[j]) < k){
            while (j+1 < n){
                j += 1;
                insert(A[j]);
                if (j > i && find(A[j]) >= k){
                    break;
                }
            }
        }

        if (find(A[j]) >= k) fmin(res, j-i+1);
        del(A[i]);
    }

    cout << (res==inf_int ? -1 : res) << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--){
        solve();
    }
    return 0;
}