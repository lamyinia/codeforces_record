#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, k;
    cin >> n >> k;
    vector <int> own(256, -1), lazy(256);
    vector <int> A(n), ans;
    for (auto &x : A){
        cin >> x;
    }

    for (auto &x : A){
        if (own[x] != -1){
            ans.push_back(own[x]);
        } else {
            int reco = 256;
            for (int i = x; i >= x-k+1; -- i){
                if (i < 0 || own[i] != -1){
                   reco = i;
                   break; 
                }
            }
            
            if (reco == 256){
                int u = x-k+1;
                for (int j = x; j >= x-k+1; -- j){
                    own[j] = u;
                }
                ans.push_back(u);
                lazy[x] = k;
            } else {
                int used = reco < 0 ? 0 : lazy[reco];
                int u;
                if (used+x-reco <= k){
                    u = reco < 0 ? 0 : own[reco];
                    lazy[x] = used+x-reco;
                } else {
                    u = reco+1;
                    lazy[x] = x-reco;
                }
                for (int j = reco+1; j <= x; ++ j){
                    own[j] = u;
                }
                ans.push_back(u);
            }
        }
    }

    print(ans);
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}