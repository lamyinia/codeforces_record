#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n;
    cin >> n;
    vector <int> cnts(10);
    int tot = 0;
    for (int i = 0; i < n; ++ i){
        int x;
        cin >> x;
        cnts[x] += 1;
        tot += x;
    }

    auto fout = [&]()->void{
        string ans;
        for (int i = 9; i >= 0; -- i){
            int cnt = cnts[i];
            while (cnt--) ans += char(i+'0');
        }
        if (ans[0] == '0') cout << 0 << "\n";
        else cout << ans << "\n";
    };
    
    if (cnts[0] == 0){
        cout << -1 << "\n";
    } else if (tot%3 == 0){
        fout();
    } else {
        for (int i = 1; i < 10; ++ i){
            if (!cnts[i]) continue;
            if ((tot-i)%3 == 0){
                cnts[i] -= 1;
                fout();
                return;
            }
        }
        for (int i = 1; i < 10; ++ i){
            if (!cnts[i]) continue;
            if (i == 0 && cnts[i] == 1) continue;
            cnts[i] -= 1;
            for (int j = 1; j <= i; ++ j){
                if (cnts[j] && (tot-i-j)%3 == 0){
                    if (j == 0 && cnts[j] == 1) continue;
                    cnts[j] -= 1;
                    fout();
                    return;
                }
            }
            cnts[i] += 1;
        }
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}