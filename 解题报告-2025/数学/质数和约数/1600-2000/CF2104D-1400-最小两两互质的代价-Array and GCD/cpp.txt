#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}
struct Sieve {
    int n;
    vector <int> vis;
    vector <i64> prms;
    Sieve(int n): n(n), vis(n+1) {
        for (int i = 2; i <= n; ++ i){
            if (!vis[i]) prms.push_back(i);
            for (auto &j : prms){
                if (i*j > n) break;
                vis[i*j] = 1;
                if (i%j == 0) break;
            }
        }
    }
    vector <i64> getPrms(){
        return prms;
    }
};
Sieve Z((int)7e6);

void solve(){
    auto &prms = Z.prms;
    int n1 = prms.size();
    vector <i64> pr(n1+1);
    for (int i = 0; i < n1; ++ i){
        pr[i+1] = pr[i] + prms[i];
    }

    int t;
    cin >> t;
    while (t--){
        int n;
        cin >> n;
        vector <int> A(n);
        vector <i64> A_pr(n+1);
        i64 sm = 0;
        for (auto &x : A){
            cin >> x;
            sm += x;
        }
        sort(A.begin(), A.end());
        for (int i = 0; i < n; ++ i){
            A_pr[i+1] = A_pr[i] + A[i];
        }

        for (int i = 0; i <= n; ++ i){
            if (sm-A_pr[i] >= pr[n-i]){
                cout << i << "\n";
                break;
            }
        }
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}