import java.io.*;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.stream.IntStream;

import static java.lang.Thread.sleep;

public class Main {
    static InputReader sc = new InputReader();
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static PrintWriter out2;

    static {
        try {
            out2 = new PrintWriter(new OutputStreamWriter(new FileOutputStream("files/out.txt"), StandardCharsets.UTF_8));
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    static boolean MultiCase = false;
    static final double eps = 1e-12;
    static final long long_inf = (long)4e18;
    static final int int_inf = (int)2e9;

    static <T extends Comparable<T>> T max(T u, T v){
        return u.compareTo(v) >= 0 ? u : v;
    }
    static <T extends Comparable<T>> T min(T u, T v){
        return u.compareTo(v) <= 0 ? u : v;
    }
    static <T> void print(T[] A) {
        int n = A.length;
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                out.print(" ");
            }
            out.print(A[i]);
        }
        out.println();
    }
    static final int mod = (int)1e9+7;
    static public long pows(long a, long b){
        long res = 1;
        while (b > 0){
            if ((b&1) > 0) res = res*a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }
    private static int[] f1, f2;
    private static long[][] C;

    public static void solve() throws IOException{
        int n = sc.nextInt();
        long m = sc.nextLong();
        int k = sc.nextInt();
        f1 = new int[k+1];
        f2 = new int[k+1];
        C = new long[n+1][n+1];
        for (int i = 0; i <= n; ++ i){
            for (int j = 0; j <= i; ++ j){
                if (j == 0){
                    C[i][j] = 1;
                } else {
                    C[i][j] = C[i-1][j] + C[i-1][j-1];
                    C[i][j] %= mod;
                }
            }
        }

        f1[0] = 1;
        long a = m/n, b = m%n;
        for (int i = 0; i < n; ++ i){
            for (int j = 0; j <= n; ++ j){
                long v = pows(C[n][j], i < b ? a+1 : a);
                for (int u = k; u-j >= 0; -- u){
                    f2[u] += f1[u-j] * v % mod;
                    f2[u] %= mod;
                }
            }
            for (int u = 0; u <= k; ++ u){
                f1[u] = f2[u];
                f2[u] = 0;
            }
        }

        out.println(f1[k]);
    }

    public static void main(String[] args) throws IOException{
        int T_case = 1;
        if (MultiCase) T_case = sc.nextInt();
        while (T_case > 0){
            solve();
            T_case -= 1;
        }
        out.close();
    }
    static class InputReader {
        private StringTokenizer st;
        private BufferedReader bf;  // 字符缓冲流

        public InputReader(){
            bf = new BufferedReader(new InputStreamReader(System.in));
            st = null;
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(bf.readLine());
            }
            return st.nextToken();
        }

        public String nextLine() throws IOException {
            return bf.readLine();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
}
