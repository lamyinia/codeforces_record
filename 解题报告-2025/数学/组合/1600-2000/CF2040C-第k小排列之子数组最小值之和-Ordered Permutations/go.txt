/*
	题意：
	考虑 1~n 的一个排列 p，S(p) 计算 p 的所有所有非空子数组的最小值之和。
	对所有可能的排列 p，当 S(p) 取得最大时，求出 第 k 小的排列，如果不存在，输出 -1.

	考虑贡献法，子数组左端点有 i+1 个，右端点有 n-i 个，一共有 (i+1) * (n-i) 个。
	所以 1 可以放在最左边或者最右边，2种方案。
	此时问题变成 n-1 个数的子问题。
	以此类推，一共有 2^(n-1) 种最优排列的方案。
*/

package main

import (
	"bufio"
	. "fmt"
	"io"
	"os"
)

func solve(in io.Reader, _w io.Writer) {
	out := bufio.NewWriter(_w)
	defer out.Flush()
	var T, n, k int
	for Fscan(in, &T); T > 0; T-- {
		Fscan(in, &n, &k)
		k--
		if k>>(uint(n-1)) > 0 {
			Fprintln(out, -1)
			continue
		}
		a := make([]int, n)
		l, r := 0, n-1
		for i := 1; i <= n; i++ {
			if k<<uint(1)>>(uint(n-i))&1 == 0 {
				a[l] = i
				l += 1
			} else {
				a[r] = i
				r -= 1
			}
		}
		for _, v := range a {
			Fprint(out, v, " ")
		}
		Fprintln(out)
	}
}

func main() {
	solve(bufio.NewReader(os.Stdin), os.Stdout)
}