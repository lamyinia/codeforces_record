#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    const int mod = 1e9+7;
    auto pows = [&](i64 a, int b)->i64{
        i64 res = 1;
        while (b){
            if (b&1) res = res*a % mod;
            a = a*a % mod;
            b >>= 1;
        }
        return res;
    };

    int n, m, k;
    cin >> n >> m >> k;

    vector<vector<int>> next(n+1);
    vector <int> vis(n+1);
    for (int i = 0,u,v; i < m; ++ i){
        cin >> u >> v;
        next[u].push_back(v);
    }
    
    int cnt = 0, l = n, r = 1;
    for (int i = 1; i <= n; ++ i){
        for (auto &x : next[i]){
            if (!(x == i+1 || x == i+1+k)){
                return void(cout << 0 << "\n");
            }

            if (x == i+1+k){
                fmin(l, i), fmax(r, i);
                vis[i] = 1;
                cnt += 1;
            }
        }
    }
    
    if (cnt){
        if (r-l > k) return void(cout << 0 << "\n");
        for (int i = 1; i <= n; ++ i){
            vis[i] += vis[i-1];
        }

        i64 res = 0;
        /*
            枚举第一条 (u, u+k+1) 边
            此时它前面必然没有走下去的边，同时它走下去的边后面也没有走下去的边
            方案数 就是 空点选或者不选
            由于每一次都不重复钦定了第一条边，且完整的枚举了选或不选
            当钦定完所有的第一条边时既枚举了所有方案。
        */
        for (int i = 0; i < n-k-1; ++ i){
            if (!vis[i] && vis[i+k+1] == vis[n]){
                int r = min(i+k, n-k-2);
                res += pows(2, r-i - (vis[r+1]-vis[i+1]));
                res %= mod;
            }
        }
        cout << res << "\n";
    } else {
        i64 res = 1;
        i64 cnt = n-2*(k+1)+1;
        if (cnt < 0) cnt = 0;
        res += pows(2, k) * cnt % mod, res %= mod;
        for (int i = 0; i < min(n-k-1-cnt,1ll*k); ++ i){
            res += pows(2, i);
            res %= mod;
        }
        cout << res << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}