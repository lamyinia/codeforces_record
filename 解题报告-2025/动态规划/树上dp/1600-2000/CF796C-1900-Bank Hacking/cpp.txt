#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 2e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}
void print(vector <int> &A){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i];
    }
}

void solve(){
    int n;
    cin >> n;
    vector <int> A(n);
    vector<vector<int>> g(n);
    vector <int> f1(n), f2(n), p1(n);
    for (auto &x : A){
        cin >> x;
    }

    for (int i = 0, u,v; i < n-1; ++ i){
        cin >> u >> v;
        u -= 1, v -= 1;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    
    auto dfs_find = [&](auto &&self, int u, int presor)->void{
        f1[u] = f2[u] = -inf_int;

        for (auto &v : g[u]){
            if (v == presor) continue;
            self(self, v, u);
            int val = max(f1[v], A[v]);
            if (val > f1[u]){
                f2[u] = f1[u];
                f1[u] = val, p1[u] = v;
            } else if (val > f2[u]){
                f2[u] = val;
            }
        }
    };
    dfs_find(dfs_find, 0, -1);

    int res = inf_int;
    // change the root and record max-value exclusive of root and its neighbor.

    auto dfs_root = [&](auto &&self, int u, int presor, int info)->void{
        int ans = max(A[u], info+2);
        
        for (auto &v : g[u]){
            fmax(ans, A[v]+1);
            if (v == presor) continue;
            fmax(ans, f1[v]+2);
        }
        fmin(res, ans);
        // cout << u << " " << ans << " " << info << "\n";
        for (auto &v : g[u]){
            if (v == presor) continue;
            int j = p1[u], nxt_info = info;
            if (presor != -1) fmax(nxt_info, A[presor]);
            if (v != j){
                fmax(nxt_info, f1[u]);
            } else {
                fmax(nxt_info, f2[u]);
            }
            self(self, v, u, nxt_info);
        }
    };
    dfs_root(dfs_root, 0, -1, -inf_int);

    cout << res << "\n";
}


int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}
