#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    const int d1 = 90, d2 = 1440;

    int n;
    cin >> n;
    vector <int> A(n+1), f(n+1, inf_int);
    for (int i = 1; i <= n; ++ i){
        cin >> A[i];
    }
    A[0] = -1, f[0] = 0;

    for (int i = 1; i <= n; ++ i){
        int x = A[i];
        int j1 = lower_bound(A.begin(), A.end(), x-d1+1) - A.begin();
        int j2 = lower_bound(A.begin(), A.end(), x-d2+1) - A.begin();
        fmin(f[i], f[i-1]+20);
        if (j1 != i) fmin(f[i], f[max(j1-1, 0)]+50);
        if (j2 != i) fmin(f[i], f[max(j2-1, 0)]+120);
    }
    for (int i = 1; i <= n; ++ i){
        cout << f[i]-f[i-1] << "\n";
    }
}

int main(){
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}