import java.io.*;
import java.util.*;
import java.util.concurrent.*;

public class Main {
    static InputReader sc = new InputReader();
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
    static boolean MultiCase = false;
    static final double eps = 1e-12;
    static final long long_inf = (long)4e18;
    static final int int_inf = (int)2e9;

    static <T extends Comparable<T>> T max(T u, T v){
        return u.compareTo(v) >= 0 ? u : v;
    }
    static <T extends Comparable<T>> T min(T u, T v){
        return u.compareTo(v) <= 0 ? u : v;
    }
    static <T> void print(T[] A) {
        int n = A.length;
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                out.print(" ");
            }
            out.print(A[i]);
        }
        out.println();
    }

    static int[][] f1, f2;
    public static void solve() throws IOException{
        int n = sc.nextInt();
        final int m = (n+1)/2;

        f1 = new int[m+1][3];
        f2 = new int[m+1][3];


        int[] A = new int[n];
        for (int i = 0; i < n; ++ i){
            A[i] = sc.nextInt();
        }


        for (int j = 0; j <= m; ++ j){
            for (int u = 0; u < 3; ++ u){
                f2[j][u] = int_inf;
            }
        }
        f2[0][0] = 0;
        f2[1][1] = 0;

        for (int i = 1; i < n; ++ i){
            for (int j = 0; j <= m; ++ j){
                for (int u = 0; u < 3; ++ u){
                    f1[j][u] = f2[j][u];
                    f2[j][u] = int_inf;
                }
            }

            for (int j = 0; j <= m; ++ j){
                for (int u = 0; u < 3; ++ u){

                    if (f1[j][u] == int_inf) continue;

                    int v = f1[j][u];
                    if (u == 0){
                        f2[j][0] = min(f2[j][0], v);
                        f2[j+1][1] = min(f2[j+1][1], v+cost(A[i-1], A[i]));
                    } else if (u == 1){
                        f2[j][2] = min(f2[j][2], v + cost(A[i], A[i-1]));
                    } else {
                        f2[j][0] = min(f2[j][0], v);
                        f2[j+1][1] = min(f2[j+1][1], v+ cost(min(A[i-2]-1, A[i-1]), A[i]));
                    }
                }
            }
        }

        Integer[] ans = new Integer[m];
        Arrays.fill(ans, int_inf);

        for (int i = 1; i <= m; ++ i){
            for (int u = 0; u < 3; ++ u){
                ans[i-1] = min(ans[i-1], f2[i][u]);
            }
        }

        print(ans);
    }
    public static int cost(int x, int y){
        return max(0, x-y+1);
    }
    public static void main(String[] args) throws IOException{
        int T_case = 1;
        if (MultiCase) T_case = sc.nextInt();
        while (T_case > 0){
            solve();
            T_case -= 1;
        }
        out.close();
    }
    static class InputReader {
        private StringTokenizer st;
        private BufferedReader bf;

        public InputReader() {
            bf = new BufferedReader(new InputStreamReader(System.in));
            st = null;
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(bf.readLine());
            }
            return st.nextToken();
        }

        public String nextLine() throws IOException {
            return bf.readLine();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
}
