#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}
/*
    f0[i] 表示第 i 个人调整前是 A 的方案数
    f1[i] 表示第 i 个人调整前是 B 的方案数
    考虑第 i+1 个人让第 i 个人满足条件
    如果第 i 个人调整后是 A：
        此时要么是 A 不和后面的 交换，要么是 B 和 前面的 A 交换了
        如果第 i+1 个人调整前是 A:
            f0[i] + f1[i]
            都能使得第 i 个人调整前是 A 或者 B 满足条件

        如果第 i+1 个人调整前是 B:
            s[i+1] == 'B' ? f1[i] : 0
            因为它不能和前面的A发生交换，不能发生任何交换，调整前和调整后必须是 B

    如果第 i 个人调整后是 B：
        此时要么调整前是 B 不和前面的交换，要么调整前是 A 和 后面的 B 交换
        如果第 i+1 个人原来是 A:
            f1[i]

        如果第 i+1 个人原来是 B:
            f0[i] if s[i+1] == 'A'
            f1[i] if s[i+1] == 'B'
*/
void solve(){
    string s;
    cin >> s;
    int n = s.size();
    s += s[0];

    i64 res = 0;
    i64 f0 = 1, f1 = 0;
    for (int i = 0; i < n; ++ i){
        i64 u0 = f0, u1 = f1;
        if (s[i] == 'A'){
            f0 = u0 + u1;
            f1 = s[i+1] == 'A' ? 0 : u1;
        } else {
            f0 = u1;
            f1 = s[i+1] == 'A' ? u0 : u1;
        }
    }
    res += f0;

    f0 = 0, f1 = 1;
    for (int i = 0; i < n; ++ i){
        i64 u0 = f0, u1 = f1;
        if (s[i] == 'A'){
            f0 = u0 + u1;
            f1 = s[i+1] == 'A' ? 0 : u1;
        } else {
            f0 = u1;
            f1 = s[i+1] == 'A' ? u0 : u1;
        }
    }
    res += f1;

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}
