#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}
/*
	对于出现次数大于1的点，我们总是找到任意一个它可以连的边，如果存在，则连接。
	此操作不会导致后面大于1的点无边可连，因为出现次数大于1，总是可以通过调整使它连接
*/
void solve(){
    int n;
    cin >> n;
    vector <int> A(n), cnts(n);
    for (int i = 0; i < n; ++ i){
        cin >> A[i];
        A[i] -= 1;
        cnts[A[i]] += 1;
    }

    set <int> tars;

    for (int i = 0; i < n; ++ i){
        if (!cnts[i]){
            tars.insert(i);
        }
    }

    int res = n - tars.size();
    for (int i = 0; i < n; ++ i){
        int x = A[i];
        if (cnts[x] > 1){
            int u = -1;
            for (auto &y : tars){
                if (y != i){
                    u = y;
                    break;
                }
            }
            if (u != -1){
                cnts[x] -= 1;
                A[i] = u;
                cnts[u] += 1;
                tars.erase(u);
            }
        }
    }

    cout << res << "\n";
    print(A, 1);
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--){
        solve();
    }
    return 0;
}