#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, m;

    cin >> n;
    vector <int> A(n);
    for (auto &x : A){
        cin >> x;
    }

    cin >> m;
    vector <int> B(m);
    for (auto &x : B){
        cin >> x;
    }

    vector <int> ans1, ans2;

    int i1 = 0, i2 = 0;
    while (i1 < n || i2 < m){
        if (i1 < n){
            int v = A[i1];
            while (i1 < n && A[i1] == v){
                ans1.push_back(i1);
                i1 += 1;
            }
            while (i2 < m && B[i2] == v){
                ans1.push_back(n+i2);
                i2 += 1;
            }
        } else {
            ans1.push_back(n+i2);
            i2 += 1;
        }
    }
    i1 = 0, i2 = 0;
    while (i1 < n || i2 < m){
        if (i2 < m){
            int v = B[i2];
            while (i2 < m && B[i2] == v){
                ans2.push_back(i2+n);
                i2 += 1;
            }
            while (i1 < n && A[i1] == v){
                ans2.push_back(i1);
                i1 += 1;
            }
        } else {
            ans2.push_back(i1);
            i1 += 1;
        }
    }
    auto val = [&](int i)->int{
        if (i < n) return A[i];
        else return B[i-n];
    };
    auto w = [&](vector <int> vec)->int{
        int n = vec.size();
        vector <int> mark(n);
        for (int i = n-1; i >= 0; -- i){
            if (val(vec[i]) == 1) break;
            mark[i] = 1;
        }
        int cnt = 0;
        for (int i = 0; i < n; ++ i){
            if (mark[i]) break;
            if (i == n-1 || val(vec[i]) != val(vec[i+1])){
                cnt += 1;
            }
        }
        return cnt;
    };
    auto fout = [&](vector <int> vec)->void{
        int n = vec.size();
        vector <int> mark(n);
        for (int i = n-1; i >= 0; -- i){
            if (val(vec[i]) == 1) break;
            mark[i] = 1;
        }
        vector <int> ans;
        for (int i = 0; i < n; ++ i){
            if (mark[i]) break;
            if (i == n-1 || val(vec[i]) != val(vec[i+1])){
                ans.push_back(i+1);
            }
        }
        cout << ans.size() << "\n";
        print(ans);
    };

    int v1 = w(ans1), v2 = w(ans2);
    if (v1 < v2){
        print(ans1, 1);
        fout(ans1);
    } else {
        print(ans2, 1);
        fout(ans2);
    }
}


int main(){
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
    freopen("input.txt", "rt", stdin), freopen("output.txt", "wt", stdout);
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}