#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 2e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i];
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, m;
    cin >> n >> m;
    vector <int> A(n);
    for (auto &x : A){
        cin >> x;
    }
    sort(A.begin(), A.end());

    i64 res = 0;
    int i = 0, j = n-1;
    while (i < j){
        if (A[i] + A[j] > m){  // 直到找到第一个小的找得到大的
            res += A[j--]+1;
        } else {
            int cur = A[i], mak = 0;
            res += A[i++]+A[j--]+1;
            while (i <= j){
                if (mak == 0){
                    if (cur+A[j] <= m){
                        cur = A[j];
                        res += A[j];
                        -- j;
                        mak = !mak;
                    } else {
                        res += A[j--]+1;
                    }
                } else {
                    if (cur+A[i] <= m){  // 大的找尽可能小的， 否则结束循环，即使中间会浪费，后面也会遍历到
                        cur = A[i];
                        res += A[i];
                        ++ i;
                        mak = !mak;
                    } else {
                        break;
                    }
                }
            }
        }
    }
    if (i == j) res += A[i]+1;

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}