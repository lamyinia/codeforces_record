#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 2e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i];
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n;
    cin >> n;
    vector <vector<int>> g(n);
    for (int i = 0, a, b; i < n-1; ++ i){
        cin >> a >> b;
        -- a, -- b;
        g[a].push_back(b), g[b].push_back(a);
    }
    vector <int> ans(n+1);
    // ans[i] 表示使得所有叶子节点的深度 是 i 的最小操作数
    auto dfs = [&](auto &&self, int x, int presor, int dep)->int{
        int ret = dep;
        for (auto &y : g[x]){
            if (y==presor) continue;
            ret = max(ret, self(self, y, x, dep+1));
        }
        ++ ans[0], -- ans[dep], ++ ans[ret+1];
        return ret;
    };

    int _ = dfs(dfs, 0, 0, 0);
    for (int i = 1; i <= n; ++ i){
        ans[i] += ans[i-1];
    }

    cout << *min_element(ans.begin(), ans.end()) << "\n";
}
 

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    cin >> _;
    while (_--) solve();
    return 0;
}

