import java.io.*;
import java.util.*;
import java.util.concurrent.*;


public class Main {
    static InputReader sc = new InputReader();
    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

    static List<List<Integer>> g;
    static int[] ans;
    public static void solve() throws IOException{
        int n = sc.nextInt();

        g = new ArrayList<>();
        ans = new int[n+1];
        for (int i = 0; i < n; ++ i){
            g.add(new ArrayList<>());
        }

        for (int i = 0,u,v; i < n-1; ++ i){
            u = sc.nextInt();
            v = sc.nextInt();
            u -= 1;
            v -= 1;
            g.get(u).add(v);
            g.get(v).add(u);
        }

        dfs(0, -1, 0);
        for (int i = 1; i <= n; ++ i){
            ans[i] += ans[i-1];
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i <= n; ++ i){
            res = Math.min(res, ans[i]);
        }
        System.out.println(res);;
    }
    static int dfs(int x, int presor, int dep){
        int ma = dep;
        for (int y : g.get(x)){
            if (y == presor) continue;
            ma = Math.max(ma, dfs(y, x, dep+1));
        }
        ans[0] += 1;
        ans[dep] -= 1;
        ans[ma+1] += 1;
        return ma;
    }
    public static void main(String[] args) throws IOException{
        int T_case = sc.nextInt();
        while (T_case > 0){
            solve();
            T_case -= 1;
        }
    }
    static class InputReader {
        private StringTokenizer st;
        private BufferedReader bf;

        public InputReader() {
            bf = new BufferedReader(new InputStreamReader(System.in));
            st = null;
        }

        public String next() throws IOException {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(bf.readLine());
            }
            return st.nextToken();
        }

        public String nextLine() throws IOException {
            return bf.readLine();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
}
