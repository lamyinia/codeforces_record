#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    long long n, m, k;
    cin >> n >> m >> k;
    vector <int> A(n);
    vector<array<int,2>> edges;

    for (auto &x : A){
        cin >> x;
    }
    for (int i = 0,u,v; i < m; ++ i){
        cin >> u >> v;
        u -= 1, v -= 1;
        edges.push_back({u, v});
    }

    auto chk = [&](int mid)->bool{
        vector <int> degs(n), f(n);
        vector<vector<int>> g(n);
        for (auto &it : edges){
            if (A[it[0]] > mid || A[it[1]] > mid) continue;
            g[it[0]].push_back(it[1]);
            degs[it[1]] += 1;
        }

        queue <int> Q;
        for (int i = 0; i < n; ++ i){
            if (!degs[i]){
                Q.push(i);
            }
        }

        int cnt = n;
        while (!Q.empty()){
            auto u = Q.front();
            Q.pop();
            cnt -= 1;
            for (auto &v : g[u]){
                -- degs[v];
                if (degs[v] == 0){
                    Q.push(v);
                }
                fmax(f[v], f[u]+1);
            }
        }
        if (cnt != 0) return true;

        for (int i = 0; i < n; ++ i){
            if (A[i] <= mid && f[i] >= k-1){
                return true;
            }
        }
        return false;
    };

    int lo = 1, hi = (int)1e9;
    while (lo < hi){
        int mid = lo + hi >> 1;
        if (chk(mid)) hi = mid;
        else lo = mid+1;
    }

    if (chk(lo)) cout << lo << "\n";
    else cout << -1 << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}