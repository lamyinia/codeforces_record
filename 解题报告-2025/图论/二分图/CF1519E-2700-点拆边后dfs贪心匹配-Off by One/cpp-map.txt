#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i];
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}
bool debug = 0;
struct fint {
    i64 p, q;
    void normal(){
        i64 d = __gcd(p, q);
        p /= d, q /= d;
        if (q < 0) p = -p, q = -q;
    }
    fint abs(){
        if (p < 0) p = -p;
        if (q < 0) q = -q;
        return *this;
    }
    fint(i64 p = 0, i64 q = 1):p(p), q(q){
        normal();
    }
    fint operator + (const fint &oth){
        i64 d = __gcd(q, oth.q);
        const i64 &d1 = q/d, d2 = oth.q/d;
        return fint(d2*p + d1*oth.p, d1*oth.q);
    }
    fint operator - (const fint &A){
        return *this + fint(-A.p, A.q);
    }
    fint operator * (const fint &A){
        return fint(p*A.p, q*A.q);
    }
    fint operator / (const fint &A){
        assert(A.p != 0);
        return *this * fint(A.q, A.p);
    }
    bool operator < (const fint &A) const{
        return p*A.q < A.p*q;
    }
    bool operator == (fint A){
        this->normal(), A.normal();
        return p == A.p && q == A.q;
    }
};

void solve(){
    int n;
    cin >> n;
    fint x, y;
    const fint unit = fint(1, 1);

    map <fint,int> mps;

    vector<vector<int>> g(2*n);
    vector <int> edgs, used(n), vis(2*n);
    int tot = -1;

    for (int i = 0,a,b,c,d; i < n; ++ i){
        cin >> a >> b >> c >> d;
        x = fint(a, b), y = fint(c, d);
        const fint k1 = (y+unit)/x, k2 = y/(x+unit);
        
        if (!mps.count(k1)) mps[k1] = ++ tot;
        if (!mps.count(k2)) mps[k2] = ++ tot;

        int j1 = mps[k1], j2 = mps[k2];
        g[j1].push_back(i);
        g[j2].push_back(i);
        edgs.push_back(j1+j2);
    }

    vector<array<int,2>> ans;
    auto dfs = [&](auto &&self, int u, int presor, int lst)->void{
        vis[u] = 1;
        vector <int> curs;
        for (auto &id : g[u]){
            int v = edgs[id]-u;
            if (v == presor) continue;
            if (!vis[v]) self(self, v, u, id);
            if (!used[id]) curs.push_back(id);
        }

        if (curs.size()%2){
            if (lst != -1) curs.push_back(lst), used[lst] = 1;
            for (int i = 1; i < curs.size(); i += 2){
                used[curs[i-1]] = used[curs[i]] = 1;
                ans.push_back({curs[i-1], curs[i]});
            }
        } else {
            for (int i = 1; i < curs.size(); i += 2){
                used[curs[i-1]] = used[curs[i]] = 1;
                ans.push_back({curs[i-1], curs[i]});
            }
        }
    };

    for (int i = 0; i <= tot; ++ i){
        if (!vis[i]){
            dfs(dfs, i, -1, -1);
        }
    }

    cout << ans.size() << "\n";
    for (auto &[u, v] : ans){
        cout << u+1 << " " << v+1 << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--) solve();
    return 0;
}