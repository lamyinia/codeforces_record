#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n;
    cin >> n;
    cin.ignore();

    auto fout = [&](int x)->string{
        if (x < 0) return "errtype";
        string res = "void";
        for (int i = 0; i < x; ++ i){
            res += "*";
        }
        return res;
    };

    map <string, int> ref;
    ref["void"] = 0;
    auto ufix = [&](string buf)->int{
        string src;
        int cnt = 0;
        for (int i = 0; i < buf.size(); ++ i){
            if (islower(buf[i])){
                src += buf[i];
            } else if (buf[i] == '&'){
                cnt -= 1;
            } else if (buf[i] == '*'){
                cnt += 1;
            }
        }

        if (!ref.count(src)) return -1;
        if (ref[src] < 0) return -1;
        cnt += ref[src];
        return cnt < 0 ? -1 : cnt;
    };
    vector <string> ans;

    for (int i = 0; i < n; ++ i){
        vector <string> chs;
        string buf, line;

        getline(cin, line);
        stringstream sin(line);
        while (sin >> buf){
            chs.push_back(buf);
        }

        if (chs.size() == 2){
            string s = chs[1];
            ans.push_back( fout(ufix(s)) );
        } else {
            string buf = chs[1], tar = chs[2];
            assert(tar != "void");

            int cnt = ufix(buf);
            ref[tar] = cnt;
        }
    }

    for (auto &ch : ans){
        cout << ch << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}