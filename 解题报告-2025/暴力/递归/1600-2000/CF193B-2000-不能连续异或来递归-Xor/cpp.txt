#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 4e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, k, r;
    cin >> n >> k >> r;
    vector <i64> as(n), bs(n), cs(n), ps(n);
    for (int i = 0; i < n; ++ i){
        cin >> as[i];
    }
    for (int i = 0; i < n; ++ i){
        cin >> bs[i];
    }
    for (int i = 0; i < n; ++ i){
        cin >> cs[i];
    }
    for (int i = 0; i < n; ++ i){
        cin >> ps[i];
        ps[i] -= 1;
    }

    i64 res = 0;
    auto Reco = [&](vector<i64>&A)->void{
        i64 ans = 0;
        for (int i = 0; i < n; ++ i){
            ans += A[i]*cs[i];
        }
        fmax(res, ans);
    };
    auto OP1 = [&](vector<i64>&A)->vector<i64>{
        vector <i64> B(n);
        for (int i = 0; i < n; ++ i){
            B[i] = (A[i]^bs[i]);
        }
        return B;
    };
    auto OP2 = [&](vector<i64>&A)->vector<i64>{
        vector <i64> B(n);
        for (int i = 0; i < n; ++ i){
            B[i] = A[ps[i]] + r;
        }
        return B;
    };

    auto dfs_brute = [&](auto &&self, vector<i64>curs, int step, bool is_xor)->void{
        if ((k-step)%2 == 0){
            Reco(curs);
            if (step >= k) return;
        }
        if (!is_xor) self(self, OP1(curs), step+1, 1);
        self(self, OP2(curs), step+1, 0);
    };
    dfs_brute(dfs_brute, as, 0, 0);

    cout << res << "\n";
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}