#include <bits/stdc++.h>
using namespace std;
using i64 = long long;
using f64 = long double;
using u64 = unsigned long long;
const f64 eps = 1e-12;
const i64 inf_i64 = 1e18;
const int inf_int = 1e9;
template <class T> void fmax(T &a, const T &b){
    if (b > a) a = b;
}
template <class T> void fmin(T &a, const T &b){
    if (b < a) a = b;
}
template <class T> void print(vector <T> &A, int d = 0){
    int n = A.size();
    for (int i = 0; i < n; ++ i){
        if (i) cout << " ";
        cout << A[i]+d;
    }
    cout << "\n";
}
int jgs(f64 x){
    return x < -eps ? -1 : x > eps;
}

void solve(){
    int n, q;
    cin >> q;
    vector <int> cur(400);
    auto roll = [&](vector <int> &f, int pos)->void{
        for (int i = pos; i >= 0; -- i){
            if (n && f[i] != 9){
                f[i] += 1, n -= 1;
                break;
            } else {
                n += f[i];
                f[i] = 0;
            }
        }
    };

    while (q--){
        cin >> n;

        vector <int> f(400);
        bool jug = false;
        for (int i = 0; i < 400; ++ i){
            if (n >= cur[i]){
                n -= cur[i];
                f[i] = cur[i];
            } else {
                roll(f, i-1);
                jug = true;
                break;
            }
        }
        // jug = b_i < b_{i-1}，分别讨论小于、等于、大于三种情况
        if (!jug){
            if (n){
                f.back() += 1;
                n -= 1;
            } else {
                roll(f, 399);
            }
        }

        for (int j = 399; j >= 0; -- j){
            int v = min(n, 9-f[j]);
            f[j] += v;
            n -= v;
        }

        cur = f;
        for (int i = 0, jug = 0; i < 400; ++ i){
            if (cur[i]) jug = 1;
            if (jug) cout << cur[i];
        }
        cout << "\n";
    }
}

int main(){
#ifdef ONLINE_JUDGE
    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
#else
    freopen("in.txt", "rt", stdin), freopen("out.txt", "wt", stdout);
#endif
    int _ = 1;
    while (_--){
        solve();
    }
    return 0;
}